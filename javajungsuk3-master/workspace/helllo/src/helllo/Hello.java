//package helllo;
//
//public class Hello {
//
//	public static void main(String[] args) {
//		// TODO Auto-generated method stub
//		System.out.println("Hello World!!");
//		
//		if (args != null) {
//			for(String txt : args) {
//				System.out.print(txt+" ");
//			}
//		}
//		
//		/*
//		 * 2. 변수
//		 *  정수 : int
//		 *  실수 : double
//		 *  불린 : boolean
//		 *  
//		 *  문자열 : String
//		 *  배열 : 자료형[]
//		 *  참조(객체) : class 클래스명 
//		 *  
//		 *  3. 연산자
//		 *  + - / * %
//		 *  A == B, A != B 
//		 *  A >= B, A <= B
//		 *  
//		 *  4. 조건문 반복문
//		 *  if - else if - else / switch ,삼항연산자 (true ? A : B)
//		 *  for / while / do - while / break / continue 
//		 *  
//		 *  5. 배열
//		 *  배열 : 자료형[]
//		 *  
//		 *  6.객체지향 
//		 *  class == new ==> Object(객체)
//		 *  클래스 (설계도) = 변수 + 메소드
//		 *  
//		 *  상속 : class A extends B == 클래스 A는 B의 상속이다.
//		 *  메소드 오버로딩  : 메소드명은 같고 파라미터가 다르면 메소드 호출을 구분해서 연동하는 기술]
//		 *  							why?  
//		 *  메소드 오버라이딩 :  부모가 정의한 메소드를 재정의 하여 사용하는 기술 
//		 *  생성자 : new class()  / 인스턴트가 생성될때 호출되는 '인스턴스 초기화 메소드'
//		 *  
//		 *  접근제어자 : 
//		 *  private : 클래스 안에서만 사용
//		 *  (dafault) : 같은 패키지 안에서만 사용
//		 *  protected : 같은 패키지 + 상속관계 일때만 사용
//		 *  public : 누구나 사용 가능
//		 *
//		 * 다형성 : 객체의 실체는 변함이 없으나 필요에 따라서 객체를 지칭하는 방법을 변경하여
//		 *  			객체가 가진 변수의 은닉과 메소드의 재사용을 이용하는 기술 
//		 *  
//		 *  인터페이스 : interface 인터페이스명
//		 *   - 추상메소드
//		 *   - static 메소드 , 변수 // java 8 
//		 *   - default  메소드 // java 8
//		 *  추상클래스 : abstract class 클래스명
//		 *   - 일반 클래스 능력 + 추상 메소드 (바디({ })가 없는 메소드)  
//		 *  ---------------------------------------------
//		 *  클래스 : class 클래스명
//		 *  
//		 *  
//		 *  
//		 *   */
//	}
//
//}
